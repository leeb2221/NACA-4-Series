from manim import *


class wing(MovingCameraScene):

    def construct(self):

# Variables
        N1 = ValueTracker(0)
        N2 = ValueTracker(5)
        N3 = ValueTracker(6)
        R = ValueTracker(0)
        c = ValueTracker(8)
        t1 = ValueTracker(0.05)
        slopeAng = ValueTracker(1)
        gap = ValueTracker(0.1015)
# My Airfoil
        c1 = ValueTracker(2)
        c2 = ValueTracker(.5)
        r  = ValueTracker(-0*PI/180)
        camlength = ValueTracker(PI)
        t2 = ValueTracker(PI/4)
# Equations to help create larger ones
        # m = N1.get_value()/100.0
        # p = N2.get_value()/10.0
        # T = N3.get_value()/100.0
        # a1 =  np.arctan((2*(N1.get_value()/100.0)/(N2.get_value()/10.0)**2)*((N2.get_value()/10.0)-t1.get_value()))
        # a2 =  np.arctan(((2*(N1.get_value()/100.0))/((1-(N2.get_value()/10.0))**2))*((N2.get_value()/10.0)-t1.get_value()))


        # yt = ((N3.get_value()/100.0)/0.2)*(0.2969*np.sqrt(t1.get_value())-0.126*t1.get_value()-0.3516*t1.get_value()**(2)+0.2843*t1.get_value()**(3)-0.1015*t1.get_value()**(4))
        # yc1 =  ((N1.get_value()/100.0)/(N2.get_value()/10.0)**2)*(2*(N2.get_value()/10.0)*t1.get_value()-t1.get_value()**2)
        # yc2 =  ((N1.get_value()/100.0)/((1-(N2.get_value()/10.0))**2))*((1-2*(N2.get_value()/10.0))+2*(N2.get_value()/10.0)*t1.get_value()-t1.get_value()**2)

        # Xu1 =  c.get_value()*(t1.get_value()-yt*np.sin(np.arctan((2*(N1.get_value()/100.0)/(N2.get_value()/10.0)**2)*((N2.get_value()/10.0)-t1.get_value()))))
        # Xu2 =  c.get_value()*(t1.get_value()-yt*np.sin(np.arctan(((2*(N1.get_value()/100.0))/((1-(N2.get_value()/10.0))**2))*((N2.get_value()/10.0)-t1.get_value()))))
        # Yu1 =  c.get_value()*(yc1+yt*np.cos(np.arctan((2*(N1.get_value()/100.0)/(N2.get_value()/10.0)**2)*((N2.get_value()/10.0)-t1.get_value()))))
        # Yu2 =  c.get_value()*(yc2+yt*np.cos(np.arctan(((2*(N1.get_value()/100.0))/((1-(N2.get_value()/10.0))**2))*((N2.get_value()/10.0)-t1.get_value()))))
        # Xl1 =  c.get_value()*(t1.get_value()+yt*np.sin(np.arctan((2*(N1.get_value()/100.0)/(N2.get_value()/10.0)**2)*((N2.get_value()/10.0)-t1.get_value()))))
        # Xl2 =  c.get_value()*(t1.get_value()+yt*np.sin(np.arctan(((2*(N1.get_value()/100.0))/((1-(N2.get_value()/10.0))**2))*((N2.get_value()/10.0)-t1.get_value()))))
        # Yl1 =  c.get_value()*(yc1-yt*np.cos(np.arctan((2*(N1.get_value()/100.0)/(N2.get_value()/10.0)**2)*((N2.get_value()/10.0)-t1.get_value()))))
        # Yl2 =  c.get_value()*(yc2-yt*np.cos(np.arctan(((2*(N1.get_value()/100.0))/((1-(N2.get_value()/10.0))**2))*((N2.get_value()/10.0)-t1.get_value()))))

# Parameteric equations to create the airfoil curves
        f1 = lambda t: np.array(((c.get_value()*(t-((N3.get_value()/(100.0))/0.2)*(0.2969*np.sqrt(t)-0.126*t-0.3516*t**2+0.2843*t**3-gap.get_value()*t**4)*np.sin(np.arctan((2*(N1.get_value()/100.0)/(N2.get_value()/10.0)**2)*((N2.get_value()/10.0)-t)))))*np.cos(R.get_value()*(-PI/180.0))-((c.get_value()*((((N1.get_value()/100.0)/(N2.get_value()/10.0)**2)*(2*(N2.get_value()/10.0)*t-t*t))+(((N3.get_value()/100.0)/0.2)*(0.2969*np.sqrt(t)-0.126*t-0.3516*t**(2)+0.2843*t**(3)-gap.get_value()*t**(4)))*np.cos(np.arctan((2*(N1.get_value()/100.0)/(N2.get_value()/10.0)**2)*((N2.get_value()/10.0)-t))))))*np.sin(R.get_value()*(-PI/180)),(c.get_value()*(t-((N3.get_value()/(100.0))/0.2)*(0.2969*np.sqrt(t)-0.126*t-0.3516*t**2+0.2843*t**3-gap.get_value()*t**4)*np.sin(np.arctan((2*(N1.get_value()/100.0)/(N2.get_value()/10.0)**2)*((N2.get_value()/10.0)-t)))))*np.sin(R.get_value()*(-PI/180))+(c.get_value()*((((N1.get_value()/100.0)/(N2.get_value()/10.0)**2)*(2*(N2.get_value()/10.0)*t-t*t))+(((N3.get_value()/100.0)/0.2)*(0.2969*np.sqrt(t)-0.126*t-0.3516*t**(2)+0.2843*t**(3)-gap.get_value()*t**(4)))*np.cos(np.arctan((2*(N1.get_value()/100.0)/(N2.get_value()/10.0)**2)*((N2.get_value()/10.0)-t)))))*np.cos(R.get_value()*(-PI/180.0)),0))   
        
        f2 = lambda t: np.array(((c.get_value()*(t-(((N3.get_value()/100.0)/0.2)*(0.2969*np.sqrt(t)-0.126*t-0.3516*t**(2)+0.2843*t**(3)-gap.get_value()*t**(4)))*np.sin(np.arctan(((2*(N1.get_value()/100.0))/((1-(N2.get_value()/10.0))**2))*((N2.get_value()/10.0)-t)))))*np.cos(R.get_value()*(-PI/180))-(c.get_value()*((((N1.get_value()/100.0)/((1-(N2.get_value()/10.0))**2))*((1-2*(N2.get_value()/10.0))+2*(N2.get_value()/10.0)*t-t*t))+(((N3.get_value()/100.0)/0.2)*(0.2969*np.sqrt(t)-0.126*t-0.3516*t**(2)+0.2843*t**(3)-gap.get_value()*t**(4)))*np.cos(np.arctan(((2*(N1.get_value()/100.0))/((1-(N2.get_value()/10.0))**2))*((N2.get_value()/10.0)-t)))))*np.sin(R.get_value()*(-PI/180)),(c.get_value()*(t-(((N3.get_value()/100.0)/0.2)*(0.2969*np.sqrt(t)-0.126*t-0.3516*t**(2)+0.2843*t**(3)-gap.get_value()*t**(4)))*np.sin(np.arctan(((2*(N1.get_value()/100.0))/((1-(N2.get_value()/10.0))**2))*((N2.get_value()/10.0)-t)))))*np.sin(R.get_value()*(-PI/180))+(c.get_value()*((((N1.get_value()/100.0)/((1-(N2.get_value()/10.0))**2))*((1-2*(N2.get_value()/10.0))+2*(N2.get_value()/10.0)*t-t*t))+(((N3.get_value()/100.0)/0.2)*(0.2969*np.sqrt(t)-0.126*t-0.3516*t**(2)+0.2843*t**(3)-gap.get_value()*t**(4)))*np.cos(np.arctan(((2*(N1.get_value()/100.0))/((1-(N2.get_value()/10.0))**2))*((N2.get_value()/10.0)-t)))))*np.cos(R.get_value()*(-PI/180)),0)) 
        
        f3 = lambda t: np.array(((c.get_value()*(t+((N3.get_value()/(100.0))/0.2)*(0.2969*np.sqrt(t)-0.126*t-0.3516*t**2+0.2843*t**3-gap.get_value()*t**4)*np.sin(np.arctan(((2*(N1.get_value()/100.0))/((1-(N2.get_value()/10.0))**2))*((N2.get_value()/10.0)-t)))))*np.cos(R.get_value()*(-PI/180))-(c.get_value()*((((N1.get_value()/100.0)/(N2.get_value()/10.0)**2)*(2*(N2.get_value()/10.0)*t-t*t))-(((N3.get_value()/100.0)/0.2)*(0.2969*np.sqrt(t)-0.126*t-0.3516*t**(2)+0.2843*t**(3)-gap.get_value()*t**(4)))*np.cos(np.arctan((2*(N1.get_value()/100.0)/(N2.get_value()/10.0)**2)*((N2.get_value()/10.0)-t)))))*np.sin(R.get_value()*(-PI/180)),(c.get_value()*(t+((N3.get_value()/(100.0))/0.2)*(0.2969*np.sqrt(t)-0.126*t-0.3516*t**2+0.2843*t**3-gap.get_value()*t**4)*np.sin(np.arctan(((2*(N1.get_value()/100.0))/((1-(N2.get_value()/10.0))**2))*((N2.get_value()/10.0)-t)))))*np.sin(R.get_value()*(-PI/180))+(c.get_value()*((((N1.get_value()/100.0)/(N2.get_value()/10.0)**2)*(2*(N2.get_value()/10.0)*t-t*t))-(((N3.get_value()/100.0)/0.2)*(0.2969*np.sqrt(t)-0.126*t-0.3516*t**(2)+0.2843*t**(3)-gap.get_value()*t**(4)))*np.cos(np.arctan((2*(N1.get_value()/100.0)/(N2.get_value()/10.0)**2)*((N2.get_value()/10.0)-t)))))*np.cos(R.get_value()*(-PI/180)),0))
        
        f4 = lambda t: np.array(((c.get_value()*(t+((N3.get_value()/(100.0))/0.2)*(0.2969*np.sqrt(t)-0.126*t-0.3516*t**2+0.2843*t**3-gap.get_value()*t**4)*np.sin(np.arctan((2*(N1.get_value()/100.0)/(N2.get_value()/10.0)**2)*((N2.get_value()/10.0)-t)))))*np.cos(R.get_value()*(-PI/180))-(c.get_value()*((((N1.get_value()/100.0)/((1-(N2.get_value()/10.0))**2))*((1-2*(N2.get_value()/10.0))+2*(N2.get_value()/10.0)*t-t*t))-(((N3.get_value()/100.0)/0.2)*(0.2969*np.sqrt(t)-0.126*t-0.3516*t**(2)+0.2843*t**(3)-gap.get_value()*t**(4)))*np.cos(np.arctan(((2*(N1.get_value()/100.0))/((1-(N2.get_value()/10.0))**2))*((N2.get_value()/10.0)-t)))))*np.sin(R.get_value()*(-PI/180)),(c.get_value()*(t+((N3.get_value()/(100.0))/0.2)*(0.2969*np.sqrt(t)-0.126*t-0.3516*t**2+0.2843*t**3-gap.get_value()*t**4)*np.sin(np.arctan((2*(N1.get_value()/100.0)/(N2.get_value()/10.0)**2)*((N2.get_value()/10.0)-t)))))*np.sin(R.get_value()*(-PI/180))+(c.get_value()*((((N1.get_value()/100.0)/((1-(N2.get_value()/10.0))**2))*((1-2*(N2.get_value()/10.0))+2*(N2.get_value()/10.0)*t-t*t))-(((N3.get_value()/100.0)/0.2)*(0.2969*np.sqrt(t)-0.126*t-0.3516*t**(2)+0.2843*t**(3)-gap.get_value()*t**(4)))*np.cos(np.arctan(((2*(N1.get_value()/100.0))/((1-(N2.get_value()/10.0))**2))*((N2.get_value()/10.0)-t)))))*np.cos(R.get_value()*(-PI/180)),0))

        camf1 = lambda t: np.array(((c.get_value()*(t-((N3.get_value()/(100.0))/0.2)*(0.2969*np.sqrt(t)-0.126*t-0.3516*t**2+0.2843*t**3-0.1015*t**4)*np.sin(np.arctan((2*(N1.get_value()/100.0)/(N2.get_value()/10.0)**2)*((N2.get_value()/10.0)-t)))))*np.cos(R.get_value()*(-PI/180))-(c.get_value()*(((N1.get_value()/100.0)/(N2.get_value()/10.0)**2)*(2*(N2.get_value()/10.0)*t-t*t)))*np.sin(R.get_value()*(-PI/180)),(c.get_value()*(t-((N3.get_value()/(100.0))/0.2)*(0.2969*np.sqrt(t)-0.126*t-0.3516*t**2+0.2843*t**3-0.1015*t**4)*np.sin(np.arctan((2*(N1.get_value()/100.0)/(N2.get_value()/10.0)**2)*((N2.get_value()/10.0)-t)))))*np.sin(R.get_value()*(-PI/180))+(c.get_value()*(((N1.get_value()/100.0)/(N2.get_value()/10.0)**2)*(2*(N2.get_value()/10.0)*t-t*t)))*np.cos(R.get_value()*(-PI/180)),0))

        camf2 = lambda t: np.array(((c.get_value()*(t-(((N3.get_value()/100.0)/0.2)*(0.2969*np.sqrt(t)-0.126*t-0.3516*t**(2)+0.2843*t**(3)-0.1015*t**(4)))*np.sin(np.arctan(((2*(N1.get_value()/100.0))/((1-(N2.get_value()/10.0))**2))*((N2.get_value()/10.0)-t)))))*np.cos(R.get_value()*(-PI/180))-(c.get_value()*(((N1.get_value()/100.0)/((1-(N2.get_value()/10.0))**2))*((1-2*(N2.get_value()/10.0))+2*(N2.get_value()/10.0)*t-t*t)))*np.sin(R.get_value()*(-PI/180)),(c.get_value()*(t-(((N3.get_value()/100.0)/0.2)*(0.2969*np.sqrt(t)-0.126*t-0.3516*t**(2)+0.2843*t**(3)-0.1015*t**(4)))*np.sin(np.arctan(((2*(N1.get_value()/100.0))/((1-(N2.get_value()/10.0))**2))*((N2.get_value()/10.0)-t)))))*np.sin(R.get_value()*(-PI/180))+(c.get_value()*(((N1.get_value()/100.0)/((1-(N2.get_value()/10.0))**2))*((1-2*(N2.get_value()/10.0))+2*(N2.get_value()/10.0)*t-t*t)))*np.cos(R.get_value()*(-PI/180)),0))

        F1 = lambda t: np.array((-6*np.sin(np.cos(2*t))*np.cos(r.get_value())-c1.get_value()*np.sin(2*t)*np.cos(t)*np.sin(r.get_value()),-6*np.sin(np.cos(2*t))*np.sin(r.get_value())+c1.get_value()*np.sin(2*t)*np.cos(t)*np.cos(r.get_value()),0))
        F2 = lambda t: np.array((-6*np.sin(np.cos(2*t))*np.cos(r.get_value())+c2.get_value()*np.sin(2*t)*np.cos(t)*np.sin(r.get_value()),-6*np.sin(np.cos(2*t))*np.sin(r.get_value())-c2.get_value()*np.sin(2*t)*np.cos(t)*np.cos(r.get_value()),0))
        cam = lambda t: np.array((-6*np.sin(np.cos(2*t))*np.cos(r.get_value())-((c1.get_value()*np.sin(2*t)*np.cos(t)-c2.get_value()*np.sin(2*t)*np.cos(t))/2)*np.sin(r.get_value()),-6*np.sin(np.cos(2*t))*np.sin(r.get_value())+((c1.get_value()*np.sin(2*t)*np.cos(t)-c2.get_value()*np.sin(2*t)*np.cos(t))/2)*np.cos(r.get_value()),0))




# Mobjects
        top1 = ParametricFunction(f1,t_range=[0,N2.get_value()/10.0],stroke_width=2,color=YELLOW).shift(LEFT*4)
        top2 = ParametricFunction(f2,t_range=[N2.get_value()/10.0,1.009],stroke_width=2,color=YELLOW).shift(LEFT*4)
        bottom1 = ParametricFunction(f3,t_range=[0,N2.get_value()/10.0],stroke_width=2,color=YELLOW).shift(LEFT*4)
        bottom2 = ParametricFunction(f4,t_range=[N2.get_value()/10.0,1.009],stroke_width=2,color=YELLOW).shift(LEFT*4)
        chord = Line(c.get_value()*np.sin(R.get_value()*(-PI/180))*UP+(c.get_value()*np.cos(R.get_value()*(-PI/180)))*RIGHT,UP*1,stroke_width=2,color=GREEN).shift(LEFT*4)
        cam1 = ParametricFunction(camf1,t_range=[0,N2.get_value()/10.0],stroke_width=2,color=WHITE).shift(LEFT*4)
        cam2 = ParametricFunction(camf2,t_range=[N2.get_value()/10.0,1.009],stroke_width=2,color=WHITE).shift(LEFT*4)
        NACA = Tex("NACA: a b c").to_edge(UP).shift(RIGHT*0.5)
        n1 = DecimalNumber(N1.get_value(),num_decimal_places=0).next_to(NACA,RIGHT,buff=0.05)
        n2 = DecimalNumber(N2.get_value(),num_decimal_places=0).next_to(n1,RIGHT,buff=0.05)
        n3 = DecimalNumber(N3.get_value(),num_decimal_places=0).next_to(n2,RIGHT,buff=0.05)
        camcirc1 = Circle(radius=c.get_value()*((N3.get_value()/100.0)/0.2)*(0.2969*np.sqrt(t1.get_value())-0.126*t1.get_value()-0.3516*t1.get_value()**(2)+0.2843*t1.get_value()**(3)-0.1015*t1.get_value()**(4))*np.cos(np.arctan((2*(N1.get_value()/100.0)/(N2.get_value()/10.0)**2)*((N2.get_value()/10.0)-t1.get_value())))).shift(LEFT*4+RIGHT*(c.get_value()*(t1.get_value()-((N3.get_value()/(100.0))/0.2)*(0.2969*np.sqrt(t1.get_value())-0.126*t1.get_value()-0.3516*t1.get_value()**2+0.2843*t1.get_value()**3-0.1015*t1.get_value()**4)*np.sin(np.arctan((2*(N1.get_value()/100.0)/(N2.get_value()/10.0)**2)*((N2.get_value()/10.0)-t1.get_value())))))+UP*(c.get_value()*(((N1.get_value()/100.0)/(N2.get_value()/10.0)**2)*(2*(N2.get_value()/10.0)*t1.get_value()-t1.get_value()**2))))
        camcirc2 = Circle(radius=(c.get_value()*((N3.get_value()/100.0)/0.2)*(0.2969*np.sqrt(t1.get_value())-0.126*t1.get_value()-0.3516*t1.get_value()**(2)+0.2843*t1.get_value()**(3)-0.1015*t1.get_value()**(4))*np.cos(np.arctan(((2*(N1.get_value()/100.0))/((1-(N2.get_value()/10.0))**2))*((N2.get_value()/10.0)-t1.get_value()))))).shift((LEFT*4+RIGHT*(c.get_value()*(t1.get_value()-(((N3.get_value()/100.0)/0.2)*(0.2969*np.sqrt(t1.get_value())-0.126*t1.get_value()-0.3516*t1.get_value()**(2)+0.2843*t1.get_value()**(3)-0.1015*t1.get_value()**(4)))*np.sin(np.arctan(((2*(N1.get_value()/100.0))/((1-(N2.get_value()/10.0))**2))*((N2.get_value()/10.0)-t1.get_value())))))+UP*(c.get_value()*(((N1.get_value()/100.0)/((1-(N2.get_value()/10.0))**2))*((1-2*(N2.get_value()/10.0))+2*(N2.get_value()/10.0)*t1.get_value()-t1.get_value()**2)))))
        horz = DashedLine(c.get_value()*np.sin(R.get_value()*(-PI/180))*UP+(c.get_value()*np.cos(R.get_value()*(-PI/180)))*RIGHT,c.get_value()*np.sin(R.get_value()*(-PI/180))*UP).shift(LEFT*4)
        attack = Angle(chord,horz,radius=c.get_value()+0.5,quadrant=(1,1))
        attacknum = DecimalNumber(-R.get_value()*(-PI/180)/DEGREES,unit="^{\circ}").scale(0.5).next_to(attack,LEFT,buff=1)
        slope = TangentLine(cam1,alpha=slopeAng.get_value(),length=4,color=BLUE)
        perp1 = TangentLine(cam1,alpha=slopeAng.get_value(),length=1,color=BLUE).set_angle(slope.get_angle()+(PI/2)).move_to(slope.get_center())
        perp2 = TangentLine(cam1,alpha=slopeAng.get_value(),length=1,color=BLUE).set_angle(slope.get_angle()-(PI/2)).move_to(slope.get_center())
        para2 = Line(start=RIGHT*((c.get_value()*(t1.get_value()-((N3.get_value()/(100.0))/0.2)*(0.2969*np.sqrt(t1.get_value())-0.126*t1.get_value()-0.3516*t1.get_value()**2+0.2843*t1.get_value()**3-0.1015*t1.get_value()**4)*np.sin(np.arctan((2*(N1.get_value()/100.0)/(N2.get_value()/10.0)**2)*((N2.get_value()/10.0)-t1.get_value())))))*np.cos(R.get_value()*(-PI/180))-(c.get_value()*(((N1.get_value()/100.0)/(N2.get_value()/10.0)**2)*(2*(N2.get_value()/10.0)*t1.get_value()-t1.get_value()**2)))*np.sin(R.get_value()*(-PI/180)))-RIGHT*(3)+UP*((c.get_value()*(t1.get_value()-((N3.get_value()/(100.0))/0.2)*(0.2969*np.sqrt(t1.get_value())-0.126*t1.get_value()-0.3516*t1.get_value()**2+0.2843*t1.get_value()**3-0.1015*t1.get_value()**4)*np.sin(np.arctan((2*(N1.get_value()/100.0)/(N2.get_value()/10.0)**2)*((N2.get_value()/10.0)-t1.get_value())))))*np.sin(R.get_value()*(-PI/180))+(c.get_value()*(((N1.get_value()/100.0)/(N2.get_value()/10.0)**2)*(2*(N2.get_value()/10.0)*t1.get_value()-t1.get_value()**2)))*np.cos(R.get_value()*(-PI/180))),end=RIGHT*((c.get_value()*(t1.get_value()-((N3.get_value()/(100.0))/0.2)*(0.2969*np.sqrt(t1.get_value())-0.126*t1.get_value()-0.3516*t1.get_value()**2+0.2843*t1.get_value()**3-0.1015*t1.get_value()**4)*np.sin(np.arctan((2*(N1.get_value()/100.0)/(N2.get_value()/10.0)**2)*((N2.get_value()/10.0)-t1.get_value())))))*np.cos(R.get_value()*(-PI/180))-(c.get_value()*(((N1.get_value()/100.0)/(N2.get_value()/10.0)**2)*(2*(N2.get_value()/10.0)*t1.get_value()-t1.get_value()**2)))*np.sin(R.get_value()*(-PI/180)))-RIGHT*(-3)+UP*((c.get_value()*(t1.get_value()-((N3.get_value()/(100.0))/0.2)*(0.2969*np.sqrt(t1.get_value())-0.126*t1.get_value()-0.3516*t1.get_value()**2+0.2843*t1.get_value()**3-0.1015*t1.get_value()**4)*np.sin(np.arctan((2*(N1.get_value()/100.0)/(N2.get_value()/10.0)**2)*((N2.get_value()/10.0)-t1.get_value())))))*np.sin(R.get_value()*(-PI/180))+(c.get_value()*(((N1.get_value()/100.0)/(N2.get_value()/10.0)**2)*(2*(N2.get_value()/10.0)*t1.get_value()-t1.get_value()**2)))*np.cos(R.get_value()*(-PI/180)))).shift(LEFT*4)
        m = DecimalNumber(N1.get_value()/100,num_decimal_places=0).to_edge(LEFT).shift(UP*1)
        p = DecimalNumber(N2.get_value()/10,num_decimal_places=0).next_to(m,DOWN)
        T = DecimalNumber(N3.get_value()/100,num_decimal_places=0).next_to(p,DOWN)

        top = ParametricFunction(F1,t_range=[0,PI/2],stroke_width=8)
        bottom = ParametricFunction(F2,t_range=[PI/2,PI],stroke_width=8)
        camber = ParametricFunction(cam,t_range=[PI/2,camlength.get_value()],color=GREY)
        para1 = Line(start=RIGHT*(-6*np.sin(np.cos(2*t2.get_value()))*np.cos(r.get_value())-((c1.get_value()*np.sin(2*t2.get_value())*np.cos(t2.get_value())-c2.get_value()*np.sin(2*t2.get_value())*np.cos(t2.get_value()))/2)*np.sin(r.get_value()))-RIGHT*(4)+UP*(-6*np.sin(np.cos(2*t2.get_value()))*np.sin(r.get_value())+((c1.get_value()*np.sin(2*t2.get_value())*np.cos(t2.get_value())-c2.get_value()*np.sin(2*t2.get_value())*np.cos(t2.get_value()))/2)*np.cos(r.get_value())),end=RIGHT*(-6*np.sin(np.cos(2*t2.get_value()))*np.cos(r.get_value())-((c1.get_value()*np.sin(2*t2.get_value())*np.cos(t2.get_value())-c2.get_value()*np.sin(2*t2.get_value())*np.cos(t2.get_value()))/2)*np.sin(r.get_value()))-RIGHT*(-4)+UP*(-6*np.sin(np.cos(2*t2.get_value()))*np.sin(r.get_value())+((c1.get_value()*np.sin(2*t2.get_value())*np.cos(t2.get_value())-c2.get_value()*np.sin(2*t2.get_value())*np.cos(t2.get_value()))/2)*np.cos(r.get_value())))
        perp3 = Line(start=RIGHT*(-6*np.sin(np.cos(2*t2.get_value()))*np.cos(r.get_value())-((c1.get_value()*np.sin(2*t2.get_value())*np.cos(t2.get_value())-c2.get_value()*np.sin(2*t2.get_value())*np.cos(t2.get_value()))/2)*np.sin(r.get_value()))+UP*(-6*np.sin(np.cos(2*t2.get_value()))*np.sin(r.get_value())+((c1.get_value()*np.sin(2*t2.get_value())*np.cos(t2.get_value())-c2.get_value()*np.sin(2*t2.get_value())*np.cos(t2.get_value()))/2)*np.cos(r.get_value()))+UP*(3),end=RIGHT*(-6*np.sin(np.cos(2*t2.get_value()))*np.cos(r.get_value())-((c1.get_value()*np.sin(2*t2.get_value())*np.cos(t2.get_value())-c2.get_value()*np.sin(2*t2.get_value())*np.cos(t2.get_value()))/2)*np.sin(r.get_value()))+UP*(-6*np.sin(np.cos(2*t2.get_value()))*np.sin(r.get_value())+((c1.get_value()*np.sin(2*t2.get_value())*np.cos(t2.get_value())-c2.get_value()*np.sin(2*t2.get_value())*np.cos(t2.get_value()))/2)*np.cos(r.get_value()))+UP*(-3))

        

# Updaters
        top1.add_updater(lambda mob: mob.become(ParametricFunction(f1,t_range=[0,N2.get_value()/10.0],stroke_width=2,color=YELLOW)).shift(LEFT*4))
        top2.add_updater(lambda mob: mob.become(ParametricFunction(f2,t_range=[N2.get_value()/10.0,1],stroke_width=2,color=YELLOW)).shift(LEFT*4))
        bottom1.add_updater(lambda mob: mob.become(ParametricFunction(f3,t_range=[0,N2.get_value()/10.0],stroke_width=2,color=YELLOW)).shift(LEFT*4))
        bottom2.add_updater(lambda mob: mob.become(ParametricFunction(f4,t_range=[N2.get_value()/10.0,1],stroke_width=2,color=YELLOW)).shift(LEFT*4))
        chord.add_updater(lambda mob: mob.become(Line(c.get_value()*np.sin(R.get_value()*(-PI/180))*UP+(c.get_value()*np.cos(R.get_value()*(-PI/180)))*RIGHT,RIGHT*0+UP*0,stroke_width=2,color=GREEN)).shift(LEFT*4))
        cam1.add_updater(lambda mob: mob.become(ParametricFunction(camf1,t_range=[0,N2.get_value()/10.0],stroke_width=2,color=WHITE)).shift(LEFT*4))
        cam2.add_updater(lambda mob: mob.become(ParametricFunction(camf2,t_range=[N2.get_value()/10.0,1.009],stroke_width=2,color=WHITE)).shift(LEFT*4))
        n1.add_updater(lambda mob: mob.become(DecimalNumber(N1.get_value(),num_decimal_places=0)).next_to(NACA,RIGHT,buff=0))
        n2.add_updater(lambda mob: mob.become(DecimalNumber(N2.get_value(),num_decimal_places=0)).next_to(n1,RIGHT,buff=0))
        n3.add_updater(lambda mob: mob.become(DecimalNumber(N3.get_value(),num_decimal_places=0)).next_to(n2,RIGHT,buff=0))
        camcirc1.add_updater(lambda mob: mob.become(Circle(radius=c.get_value()*((N3.get_value()/100.0)/0.2)*(0.2969*np.sqrt(t1.get_value())-0.126*t1.get_value()-0.3516*t1.get_value()**(2)+0.2843*t1.get_value()**(3)-0.1015*t1.get_value()**(4))*np.cos(np.arctan((2*(N1.get_value()/100.0)/(N2.get_value()/10.0)**2)*((N2.get_value()/10.0)-t1.get_value())))).shift(LEFT*4+RIGHT*(c.get_value()*(t1.get_value()-((N3.get_value()/(100.0))/0.2)*(0.2969*np.sqrt(t1.get_value())-0.126*t1.get_value()-0.3516*t1.get_value()**2+0.2843*t1.get_value()**3-0.1015*t1.get_value()**4)*np.sin(np.arctan((2*(N1.get_value()/100.0)/(N2.get_value()/10.0)**2)*((N2.get_value()/10.0)-t1.get_value())))))+UP*(c.get_value()*(((N1.get_value()/100.0)/(N2.get_value()/10.0)**2)*(2*(N2.get_value()/10.0)*t1.get_value()-t1.get_value()**2))))))
        camcirc2.add_updater(lambda mob: mob.become(Circle(radius=(c.get_value()*((N3.get_value()/100.0)/0.2)*(0.2969*np.sqrt(t1.get_value())-0.126*t1.get_value()-0.3516*t1.get_value()**(2)+0.2843*t1.get_value()**(3)-0.1015*t1.get_value()**(4))*np.cos(np.arctan(((2*(N1.get_value()/100.0))/((1-(N2.get_value()/10.0))**2))*((N2.get_value()/10.0)-t1.get_value()))))).shift((LEFT*4+RIGHT*(c.get_value()*(t1.get_value()-(((N3.get_value()/100.0)/0.2)*(0.2969*np.sqrt(t1.get_value())-0.126*t1.get_value()-0.3516*t1.get_value()**(2)+0.2843*t1.get_value()**(3)-0.1015*t1.get_value()**(4)))*np.sin(np.arctan(((2*(N1.get_value()/100.0))/((1-(N2.get_value()/10.0))**2))*((N2.get_value()/10.0)-t1.get_value())))))+UP*(c.get_value()*(((N1.get_value()/100.0)/((1-(N2.get_value()/10.0))**2))*((1-2*(N2.get_value()/10.0))+2*(N2.get_value()/10.0)*t1.get_value()-t1.get_value()**2)))))))
        horz.add_updater(lambda mob: mob.become(DashedLine(c.get_value()*np.sin(R.get_value()*(-PI/180))*UP+(c.get_value()*np.cos(R.get_value()*(-PI/180)))*RIGHT,c.get_value()*np.sin(R.get_value()*(-PI/180))*UP)).shift(LEFT*4))
        attack.add_updater(lambda mob: mob.become(Angle(chord,horz,radius=c.get_value()+0.5,quadrant=(1,1))))
        attacknum.add_updater(lambda mob: mob.set_value(-R.get_value()*(-PI/180)/DEGREES))
        attacknum.add_updater(lambda mob: mob.next_to(attack,LEFT,buff=1))
        slope.add_updater(lambda mob: mob.become(TangentLine(cam1,alpha=slopeAng.get_value(),length=4,color=BLUE)))
        perp1.add_updater(lambda mob: mob.become(TangentLine(cam1,alpha=slopeAng.get_value(),length=2,color=BLUE).set_angle(slope.get_angle()+(PI/2)).move_to(slope.get_center())))
        perp2.add_updater(lambda mob: mob.become(TangentLine(cam1,alpha=slopeAng.get_value(),length=2,color=BLUE).set_angle(slope.get_angle()-(PI/2)).move_to(slope.get_center())))
        para2.add_updater(lambda mob: mob.become(Line(start=RIGHT*((c.get_value()*(t1.get_value()-((N3.get_value()/(100.0))/0.2)*(0.2969*np.sqrt(t1.get_value())-0.126*t1.get_value()-0.3516*t1.get_value()**2+0.2843*t1.get_value()**3-0.1015*t1.get_value()**4)*np.sin(np.arctan((2*(N1.get_value()/100.0)/(N2.get_value()/10.0)**2)*((N2.get_value()/10.0)-t1.get_value())))))*np.cos(R.get_value()*(-PI/180))-(c.get_value()*(((N1.get_value()/100.0)/(N2.get_value()/10.0)**2)*(2*(N2.get_value()/10.0)*t1.get_value()-t1.get_value()**2)))*np.sin(R.get_value()*(-PI/180)))-RIGHT*(3)+UP*((c.get_value()*(t1.get_value()-((N3.get_value()/(100.0))/0.2)*(0.2969*np.sqrt(t1.get_value())-0.126*t1.get_value()-0.3516*t1.get_value()**2+0.2843*t1.get_value()**3-0.1015*t1.get_value()**4)*np.sin(np.arctan((2*(N1.get_value()/100.0)/(N2.get_value()/10.0)**2)*((N2.get_value()/10.0)-t1.get_value())))))*np.sin(R.get_value()*(-PI/180))+(c.get_value()*(((N1.get_value()/100.0)/(N2.get_value()/10.0)**2)*(2*(N2.get_value()/10.0)*t1.get_value()-t1.get_value()**2)))*np.cos(R.get_value()*(-PI/180))),end=RIGHT*((c.get_value()*(t1.get_value()-((N3.get_value()/(100.0))/0.2)*(0.2969*np.sqrt(t1.get_value())-0.126*t1.get_value()-0.3516*t1.get_value()**2+0.2843*t1.get_value()**3-0.1015*t1.get_value()**4)*np.sin(np.arctan((2*(N1.get_value()/100.0)/(N2.get_value()/10.0)**2)*((N2.get_value()/10.0)-t1.get_value())))))*np.cos(R.get_value()*(-PI/180))-(c.get_value()*(((N1.get_value()/100.0)/(N2.get_value()/10.0)**2)*(2*(N2.get_value()/10.0)*t1.get_value()-t1.get_value()**2)))*np.sin(R.get_value()*(-PI/180)))-RIGHT*(-3)+UP*((c.get_value()*(t1.get_value()-((N3.get_value()/(100.0))/0.2)*(0.2969*np.sqrt(t1.get_value())-0.126*t1.get_value()-0.3516*t1.get_value()**2+0.2843*t1.get_value()**3-0.1015*t1.get_value()**4)*np.sin(np.arctan((2*(N1.get_value()/100.0)/(N2.get_value()/10.0)**2)*((N2.get_value()/10.0)-t1.get_value())))))*np.sin(R.get_value()*(-PI/180))+(c.get_value()*(((N1.get_value()/100.0)/(N2.get_value()/10.0)**2)*(2*(N2.get_value()/10.0)*t1.get_value()-t1.get_value()**2)))*np.cos(R.get_value()*(-PI/180)))).shift(LEFT*4)))

        # top.add_updater(lambda mob: mob.become(ParametricFunction(F1,t_range=[0,PI/2],stroke_width=8)))
        # bottom.add_updater(lambda mob: mob.become(ParametricFunction(F2,t_range=[PI/2,PI],stroke_width=8)))
        # camber.add_updater(lambda mob: mob.become(ParametricFunction(cam,t_range=[PI/2,camlength.get_value()],color=GREY)))
        perp3.add_updater(lambda mob: mob.become(Line(start=RIGHT*(-6*np.sin(np.cos(2*t2.get_value()))*np.cos(r.get_value())-((c1.get_value()*np.sin(2*t2.get_value())*np.cos(t2.get_value())-c2.get_value()*np.sin(2*t2.get_value())*np.cos(t2.get_value()))/2)*np.sin(r.get_value()))+UP*(-6*np.sin(np.cos(2*t2.get_value()))*np.sin(r.get_value())+((c1.get_value()*np.sin(2*t2.get_value())*np.cos(t2.get_value())-c2.get_value()*np.sin(2*t2.get_value())*np.cos(t2.get_value()))/2)*np.cos(r.get_value()))+UP*(3),end=RIGHT*(-6*np.sin(np.cos(2*t2.get_value()))*np.cos(r.get_value())-((c1.get_value()*np.sin(2*t2.get_value())*np.cos(t2.get_value())-c2.get_value()*np.sin(2*t2.get_value())*np.cos(t2.get_value()))/2)*np.sin(r.get_value()))+UP*(-6*np.sin(np.cos(2*t2.get_value()))*np.sin(r.get_value())+((c1.get_value()*np.sin(2*t2.get_value())*np.cos(t2.get_value())-c2.get_value()*np.sin(2*t2.get_value())*np.cos(t2.get_value()))/2)*np.cos(r.get_value()))+UP*(-3))))
        para1.add_updater(lambda mob: mob.become(Line(start=RIGHT*(-6*np.sin(np.cos(2*t2.get_value()))*np.cos(r.get_value())-((c1.get_value()*np.sin(2*t2.get_value())*np.cos(t2.get_value())-c2.get_value()*np.sin(2*t2.get_value())*np.cos(t2.get_value()))/2)*np.sin(r.get_value()))-RIGHT*(4)+UP*(-6*np.sin(np.cos(2*t2.get_value()))*np.sin(r.get_value())+((c1.get_value()*np.sin(2*t2.get_value())*np.cos(t2.get_value())-c2.get_value()*np.sin(2*t2.get_value())*np.cos(t2.get_value()))/2)*np.cos(r.get_value())),end=RIGHT*(-6*np.sin(np.cos(2*t2.get_value()))*np.cos(r.get_value())-((c1.get_value()*np.sin(2*t2.get_value())*np.cos(t2.get_value())-c2.get_value()*np.sin(2*t2.get_value())*np.cos(t2.get_value()))/2)*np.sin(r.get_value()))-RIGHT*(-4)+UP*(-6*np.sin(np.cos(2*t2.get_value()))*np.sin(r.get_value())+((c1.get_value()*np.sin(2*t2.get_value())*np.cos(t2.get_value())-c2.get_value()*np.sin(2*t2.get_value())*np.cos(t2.get_value()))/2)*np.cos(r.get_value())))))


# Lift Calculations

         

# Testing Area
        # self.play(Write(NACA),Write(n1),Write(n2),Write(n3))
        # self.play(Create(horz))
        # self.wait()
        # self.play(Create(cam1),run_time=3)
        # self.play(Create(cam2),run_time=3)
        # self.play(Create(top1),Create(bottom1),Create(top2),Create(bottom2),run_time=3)
        # self.wait(3)
        # self.play(N1.animate.set_value(4),N1.animate.set_value(4),N3.animate.set_value(20))
        # self.wait(3)
        # self.play(N1.animate.set_value(6),N1.animate.set_value(2),N3.animate.set_value(12))
        # self.wait(3)
        # self.play(N1.animate.set_value(9),N1.animate.set_value(5),N3.animate.set_value(12))
        # self.wait(3)
        # self.remove(bottom2,top2)
        # self.wait(2)
        # self.play(Create(slope),Create(perp1),Create(perp2),Create(camcirc1))
        # self.wait()
        # self.play(slopeAng.animate.set_value(.25),t1.animate.set_value(.133),run_time=5)
        # self.wait()
        # self.remove(camcirc1)
        # self.camera.frame.save_state()
        # self.play(self.camera.frame.animate.set(width=camcirc1.width*3).move_to(camcirc1))
        # self.wait(2)
# Anatomy
        # t1 = Text("Leading Edge",color=WHITE).to_edge(UP)
        # t2 = Text("Mean Camber Line",color=WHITE).to_edge(UP)
        # t3 = Text("Upper Surface",color=YELLOW).to_edge(UP)
        # t4 = Text("Lower Surface",color=YELLOW).to_edge(UP)
        # t5= Text("Trailing Edge",color=WHITE).to_edge(UP)
        # t6 = Text("Chord Line",color=GREEN).to_edge(UP)
        # self.wait()
        # self.play(Write(t1))
        # d1 = Dot().shift(4*LEFT)
        # self.play(Create(d1))
        # self.play(Flash(d1))
        # self.wait()
        # self.play(Transform(t1,t2))
        # self.play(Create(cam1))
        # self.play(Create(cam2))
        # self.wait()
        # self.play(Transform(t1,t3))
        # self.play(Create(top1))
        # self.play(Create(top2))
        # self.wait()
        # self.play(Transform(t1,t4))
        # self.play(Create(bottom1))
        # self.play(Create(bottom2))
        # self.wait()
        # self.play(Transform(t1,t5))
        # d2 = Dot(c.get_value()*np.sin(R.get_value()*(-PI/180))*UP+(c.get_value()*np.cos(R.get_value()*(-PI/180)))*RIGHT).shift(4*LEFT)
        # self.play(Create(d2))
        # self.play(Flash(d2))
        # self.wait()
        # self.play(Transform(t1,t6))
        # self.play(Create(chord))
        # self.wait()

# First Build
        # d1 = Dot().shift(4*LEFT)
        # self.wait()
        # self.play(Create(d1))
        # self.wait()
        # self.play(Create(chord))
        # self.wait()
        # d2 = Dot(c.get_value()*np.sin(R.get_value()*(-PI/180))*UP+(c.get_value()*np.cos(R.get_value()*(-PI/180)))*RIGHT).shift(4*LEFT)
        # self.play(Create(d2))
        # self.wait()
        # self.play(Create(cam1))
        # self.play(Create(cam2))
        # self.wait()
        # self.play(Create(top1),Create(bottom1))
        # self.play(Create(top2),Create(bottom2))
        # self.wait()
        # self.play(N1.animate.set_value(4),N2.animate.set_value(3),N3.animate.set_value(20),run_time=2)
        # self.play(N1.animate.set_value(6),N2.animate.set_value(4),N3.animate.set_value(8),run_time=2)
        # self.play(N1.animate.set_value(0.0001),N2.animate.set_value(0.0001),N3.animate.set_value(12),run_time=2)
        # self.play(N1.animate.set_value(4),N2.animate.set_value(4),N3.animate.set_value(12),run_time=2)
        # self.play(N1.animate.set_value(9),N2.animate.set_value(5),N3.animate.set_value(50),run_time=2)
        # self.play(N1.animate.set_value(6),N2.animate.set_value(3),N3.animate.set_value(5),run_time=2)
        # self.play(N1.animate.set_value(9),N2.animate.set_value(5),N3.animate.set_value(20),run_time=2)
        # self.wait()
        # self.play(FadeOut(d1),FadeOut(d2),FadeOut(top1),FadeOut(top2),FadeOut(bottom1),FadeOut(bottom2),FadeOut(chord),FadeOut(cam1),FadeOut(cam2))
        # self.wait()

# The Ns
        # n1b = DecimalNumber(N1.get_value(),num_decimal_places=0).next_to(NACA,RIGHT,buff=0.05)
        # n2b = DecimalNumber(N2.get_value(),num_decimal_places=0).next_to(n1b,RIGHT,buff=0.05)
        # n3b = DecimalNumber(N3.get_value(),num_decimal_places=0).next_to(n2b,RIGHT,buff=0.05)
        # n1a = DecimalNumber(N1.get_value(),num_decimal_places=0).to_edge(LEFT).shift(UP*1)
        # n2a = DecimalNumber(N2.get_value(),num_decimal_places=0).next_to(n1a,DOWN)
        # n3a = DecimalNumber(N3.get_value(),num_decimal_places=0).next_to(n2a,DOWN)
        # self.wait()
        # self.add(NACA)
        # self.play(Write(n1b),Write(n2b),Write(n3b))
        # self.wait()
        # self.play(Transform(n1b,n1a))
        # self.wait()
        # t1 = Text(": 9%  of the chord length is the max camber; m=0.09").scale(0.5).next_to(n1a)
        # t2 = Text(": at 50% of the chord is the location of max camber; p=0.5").scale(0.5).next_to(n2a)
        # t3 = Text(": 20% of chord lenght is the max thickness; T=0.2").scale(0.5).next_to(n3a)
        # self.play(Write(t1))
        # self.wait()
        # self.play(Transform(n2b,n2a))
        # self.wait()
        # self.play(Write(t2))
        # self.wait()
        # self.play(Transform(n3b,n3a))
        # self.wait()
        # self.play(Write(t3))
        # self.wait()
        # self.play(FadeOut(t1),FadeOut(t2),FadeOut(t3),FadeOut(n1b),FadeOut(n2b),FadeOut(n3b),FadeOut(NACA))
        # self.wait()

# Second Ns
        # t1 = Text("m=").to_edge(LEFT).shift(UP*1)
        # t2 = Text("p=").next_to(t1,DOWN)
        # t3 = Text("T=").next_to(t2,DOWN)
        # m.add_updater(lambda mob: mob.become(DecimalNumber(N1.get_value()/100,num_decimal_places=2).next_to(t1,RIGHT)))
        # p.add_updater(lambda mob: mob.become(DecimalNumber(N2.get_value()/10,num_decimal_places=2).next_to(t2,RIGHT)))
        # T.add_updater(lambda mob: mob.become(DecimalNumber(N3.get_value()/100,num_decimal_places=2).next_to(t3,RIGHT)))
        # self.wait()
        # self.add(NACA)
        # self.play(Write(n1),Write(n2),Write(n3))
        # self.add(top1,top2,bottom1,bottom2)
        # self.wait()
        # self.play(Write(t1),Write(t2),Write(t3),Write(m),Write(p),Write(T))
        # self.wait()
        # self.play(N1.animate.set_value(0.0001),N2.animate.set_value(4),N3.animate.set_value(12),run_time=4)
        # self.wait()
        # self.play(N1.animate.set_value(9),N2.animate.set_value(4),N3.animate.set_value(12),run_time=4)
        # self.wait()
        # self.play(N1.animate.set_value(9),N2.animate.set_value(9),N3.animate.set_value(12),run_time=4)
        # self.wait()
        # self.play(N1.animate.set_value(9),N2.animate.set_value(1),N3.animate.set_value(12),run_time=4)
        # self.wait()
        # self.play(N1.animate.set_value(9),N2.animate.set_value(4),N3.animate.set_value(12),run_time=4)
        # self.wait()
        # self.play(N1.animate.set_value(9),N2.animate.set_value(4),N3.animate.set_value(70),run_time=4)
        # self.wait()
        # self.play(N1.animate.set_value(9),N2.animate.set_value(4),N3.animate.set_value(12),run_time=4)
        # self.wait()
        # self.play(FadeOut(top1),FadeOut(top2),FadeOut(bottom1),FadeOut(bottom2),FadeOut(NACA),FadeOut(n1),FadeOut(n2),FadeOut(n3),FadeOut(t1),FadeOut(t2),FadeOut(t3),FadeOut(m),FadeOut(p),FadeOut(T))
        # self.wait()

# Mean Camber
        # t1 = Text("Mean Camber Line",color=YELLOW).to_edge(UP)
        # t2 = Text("Thickness Equation",color=YELLOW).to_edge(UP)
        # self.wait()
        # self.play(Write(t1))
        # self.wait()
        # self.play(Create(cam1),Create(cam2))
        # self.wait()
        # cam1.set_color(RED)
        # cam2.set_color(BLUE)
        # self.wait()   
        # e2 = MathTex( r'y_{c}=\frac{m}{\left( 1-p \right)^{2}}\left( \left( 1-2p \right) +2pt-t^{2} \right):p\le t\le c',color=BLUE).to_edge(DL)
        # e1 = MathTex( r'y_{c}=\frac{m}{p^{2}}\left( 2pt-t^{2} \right):0\le t\le p',color=RED).next_to(e2,UP).to_edge(LEFT)
        # self.play(Write(e1))
        # self.wait()
        # self.play(Write(e2))
        # self.wait()
        # self.play(FadeOut(e1),FadeOut(e2))
        # self.wait()
        # cam1.set_color(WHITE)
        # cam2.set_color(WHITE)
        # self.play(Transform(t1,t2))
        # self.wait()


# Thickness Equation           
        # title1 = Text("Thickness Equation",color=YELLOW).to_edge(UP)
        # self.add(title1,cam1,cam2)
        # self.wait()
        # e1 = MathTex( r'y_{t}=5T\left[ 0.2969\sqrt{t}-0.1260t-0.3516t^{2}+0.2843t^{3}-0.1015t^{4} \right]').to_edge(DL).scale(0.9)
        # self.play(Write(e1))
        # self.wait()
        # self.play(FadeOut(cam1),FadeOut(cam2))
        # self.wait()
        # self.play(Create(top),Create(bottom),Create(camber))
        # self.wait()
        # top.set_color(RED)
        # bottom.set_color(BLUE)
        # camber.set_color(PURPLE)
        # self.wait()
        # self.play(Create(para1),Create(perp3))
        # self.wait()
        # self.play(t2.animate.set_value(0.1),run_time=6)
        # self.wait()
        # self.play(FadeOut(top),FadeOut(bottom),FadeOut(camber),FadeOut(para1),FadeOut(perp3))
        # self.wait()
        # self.play(Create(cam1),Create(top1),Create(bottom1))
        # self.wait()
        # self.play(Create(slope),Create(perp1),Create(perp2),Create(camcirc1))
        # self.wait()
        # self.play(slopeAng.animate.set_value(.25),t1.animate.set_value(.133),run_time=5)
        # self.remove(camcirc1)
        # self.wait()
        # self.camera.frame.save_state()
        # self.play(Create(para2))
        # self.wait()
        # slope.set_color(RED)
        # para2.set_color(RED)
        # self.wait()
        # self.play(self.camera.frame.animate.set(width=camcirc1.width*4).move_to(camcirc1))
        # self.wait()
        # COS = Line(start=camcirc1.get_center(),end=camcirc1.get_center()+UP*(c.get_value()*((N3.get_value()/100.0)/0.2)*(0.2969*np.sqrt(t1.get_value())-0.126*t1.get_value()-0.3516*t1.get_value()**(2)+0.2843*t1.get_value()**(3)-0.1015*t1.get_value()**(4))*np.cos(np.arctan((2*(N1.get_value()/100.0)/(N2.get_value()/10.0)**2)*((N2.get_value()/10.0)-t1.get_value()))))+UP*(-.04),color=RED,stroke_width=1)
        # SIN = Line(start=COS.get_end(),end=COS.get_end()-RIGHT*(c.get_value()*((N3.get_value()/100.0)/0.2)*(0.2969*np.sqrt(t1.get_value())-0.126*t1.get_value()-0.3516*t1.get_value()**(2)+0.2843*t1.get_value()**(3)-0.1015*t1.get_value()**(4))*np.sin(np.arctan((2*(N1.get_value()/100.0)/(N2.get_value()/10.0)**2)*((N2.get_value()/10.0)-t1.get_value())))),color=RED,stroke_width=1)
        # thick = Line(start=SIN.get_end(),end=camcirc1.get_center(),color=RED,stroke_width=1)
        # self.play(Create(COS))
        # self.wait()
        # self.play(Create(SIN))
        # self.wait()
        # self.play(Create(thick))
        # self.wait()
        # ang = Angle(COS,thick,radius=0.5,quadrant=(1,-1),stroke_width=1)
        # self.play(Create(ang))
        # self.wait()
        # self.play(Restore(self.camera.frame))
        # self.wait()
        # self.play(FadeOut(title1),FadeOut(cam1),FadeOut(top1),FadeOut(bottom1),FadeOut(para2),FadeOut(perp1),FadeOut(perp2),FadeOut(slope),FadeOut(e1),FadeOut(COS),FadeOut(SIN),FadeOut(thick),FadeOut(ang))
        # self.wait()

# Surfaces
        # D1 = Dot(RIGHT*((c.get_value()*(t1.get_value()+((N3.get_value()/(100.0))/0.2)*(0.2969*np.sqrt(t1.get_value())-0.126*t1.get_value()-0.3516*t1.get_value()**2+0.2843*t1.get_value()**3-gap.get_value()*t1.get_value()**4)*np.sin(np.arctan(((2*(N1.get_value()/100.0))/((1-(N2.get_value()/10.0))**2))*((N2.get_value()/10.0)-t1.get_value()))))))+UP*((c.get_value()*((((N1.get_value()/100.0)/(N2.get_value()/10.0)**2)*(2*(N2.get_value()/10.0)*t1.get_value()-t1.get_value()**2))-(((N3.get_value()/100.0)/0.2)*(0.2969*np.sqrt(t1.get_value())-0.126*t1.get_value()-0.3516*t1.get_value()**(2)+0.2843*t1.get_value()**(3)-gap.get_value()*t1.get_value()**(4)))*np.cos(np.arctan((2*(N1.get_value()/100.0)/(N2.get_value()/10.0)**2)*((N2.get_value()/10.0)-t1.get_value()))))))).shift(LEFT*4)
        # D1.add_updater(lambda mob: mob.become(Dot(RIGHT*((c.get_value()*(t1.get_value()+((N3.get_value()/(100.0))/0.2)*(0.2969*np.sqrt(t1.get_value())-0.126*t1.get_value()-0.3516*t1.get_value()**2+0.2843*t1.get_value()**3-gap.get_value()*t1.get_value()**4)*np.sin(np.arctan(((2*(N1.get_value()/100.0))/((1-(N2.get_value()/10.0))**2))*((N2.get_value()/10.0)-t1.get_value()))))))+UP*((c.get_value()*((((N1.get_value()/100.0)/(N2.get_value()/10.0)**2)*(2*(N2.get_value()/10.0)*t1.get_value()-t1.get_value()**2))-(((N3.get_value()/100.0)/0.2)*(0.2969*np.sqrt(t1.get_value())-0.126*t1.get_value()-0.3516*t1.get_value()**(2)+0.2843*t1.get_value()**(3)-gap.get_value()*t1.get_value()**(4)))*np.cos(np.arctan((2*(N1.get_value()/100.0)/(N2.get_value()/10.0)**2)*((N2.get_value()/10.0)-t1.get_value()))))))).shift(LEFT*4)))
        # lab1 = MathTex( r'\left( X_{L},Y_{L} \right)').next_to(D1,DOWN)
        # lab1.add_updater(lambda mob: mob.become(MathTex( r'\left( X_{L},Y_{L} \right)').next_to(D1,DOWN)))
        # title = Text("Surfaces",color=YELLOW).to_edge(UP)
        # self.wait()
        # self.play(Write(title))
        # self.wait()
        # q1 = MathTex( r'X_{U}=ct').to_edge(UL).shift(DOWN*1)
        # q2 = MathTex( r'Y_{U}=cy_{c}').next_to(q1,DOWN).to_edge(LEFT)
        # q3 = MathTex( r'X_{U}=c\left( t-y_{t}sin\theta \right)',color=YELLOW).to_edge(UL).shift(DOWN*1)
        # q4 = MathTex( r'Y_{U}=c\left( y_{c}+y_{t}cos\theta \right)',color=YELLOW).next_to(q1,DOWN).to_edge(LEFT)
        # self.play(Write(q1))
        # self.wait()
        # self.play(Write(q2))
        # self.wait()
        # self.play(Create(cam1))
        # self.play(Create(cam2))
        # self.wait()
        # self.play(Transform(q1,q3))
        # self.wait()
        # self.play(Transform(q2,q4))
        # self.wait()
        # self.play(Create(top1))
        # self.play(Create(top2))
        # self.wait()
        # w2 = MathTex( r'Y_{L}=cy_{c}').to_edge(DL)
        # w1 = MathTex( r'X_{L}=ct').next_to(w2,UP).to_edge(LEFT)
        # w4 = MathTex( r'Y_{L}=c\left( y_{c}-y_{t}cos\theta \right)',color=YELLOW).to_edge(DL)
        # w3 = MathTex( r'X_{L}=c\left( t+y_{t}sin\theta \right)',color=YELLOW).next_to(w2,UP).to_edge(LEFT)
        # self.play(Write(w1))
        # self.wait()
        # self.play(Write(w2))
        # self.wait()
        # self.play(Transform(w1,w3))
        # self.wait()
        # self.play(Transform(w2,w4))
        # self.wait()
        # self.play(Create(bottom1))
        # self.play(Create(bottom2))
        # self.wait()
        # self.play(FadeOut(cam1),FadeOut(cam2))
        # self.wait()
        # self.play(Create(D1),Write(lab1))
        # self.wait()
        # self.play(t1.animate.set_value(N2.get_value()/10.0),run_time=5)
        # self.wait()
        
# Theta
        # e2 = MathTex( r'y_{c}=\frac{m}{\left( 1-p \right)^{2}}\left( \left( 1-2p \right) +2pt-t^{2} \right):p\le t\le c').to_edge(LEFT)
        # e1 = MathTex( r'y_{c}=\frac{m}{p^{2}}\left( 2pt-t^{2} \right):0\le t\le p').next_to(e2,UP).to_edge(LEFT)
        # e4 = MathTex( r'\frac{dy_{c}}{dt}=\frac{2m}{\left( 1-p \right)^{2}}\left( p-t \right):p\le t\le c').to_edge(LEFT)
        # e3 = MathTex( r'\frac{dy_{c}}{dt}=\frac{2m}{p^{2}}\left( p-t \right):0\le t\le p').next_to(e2,UP).to_edge(LEFT)
        # e5 = MathTex( r'\theta = tan^{-1}\left( \frac{dy_{c}}{dt} \right)').next_to(e2,DOWN).to_edge(LEFT)
        # self.wait()
        # self.play(Write(e1))
        # self.play(Write(e2))
        # self.wait()
        # self.play(Transform(e1,e3))
        # self.play(Transform(e2,e4))
        # self.wait()
        # self.play(Write(e5))
        # self.wait()

# Big Cycle
        # self.wait()
        # self.add(NACA)
        # A = Text("a: ").to_edge(LEFT).shift(UP*1)
        # B = Text("b: ").next_to(A,DOWN)
        # C = Text("c: ").next_to(B,DOWN)
        # n1a = DecimalNumber(N1.get_value(),num_decimal_places=0).next_to(A,RIGHT)
        # n2a = DecimalNumber(N2.get_value(),num_decimal_places=0).next_to(B,RIGHT)
        # n3a = DecimalNumber(N3.get_value(),num_decimal_places=0).next_to(C,RIGHT)
        # n2a.add_updater(lambda mob: mob.become(DecimalNumber(N1.get_value(),num_decimal_places=0).next_to(B,RIGHT)))
        # n1a.add_updater(lambda mob: mob.become(DecimalNumber(N1.get_value(),num_decimal_places=0).next_to(A,RIGHT)))
        # n3a.add_updater(lambda mob: mob.become(DecimalNumber(N3.get_value(),num_decimal_places=0).next_to(C,RIGHT)))
        # self.play(Write(n1a),Write(n2a),Write(n3a),Write(A),Write(B),Write(C))
        # self.wait()
        # self.play(Create(top1),Create(bottom1))
        # self.play(Create(top2),Create(bottom2))
        # self.wait()
        # A3 = [6,9,12,15,18,21,25]
        # A2 = [2,3,4,5,6,7]
        # A1 = [2,4,6]
        # for i in range(7):
        #     self.play(N1.animate.set_value(0),N2.animate.set_value(5),N3.animate.set_value(A3[i]),run_time=2)
        #     self.wait()
        # self.play(N1.animate.set_value(2),N2.animate.set_value(2),N3.animate.set_value(6),run_time=2)
        # for i in range(3):
        #     for j in range(6):
        #         for k in range(6):
        #             self.play(N1.animate.set_value(A1[i]),N2.animate.set_value(A2[j]),N3.animate.set_value(A3[k]),run_time=2)
        #             self.wait()

# Gap closeure
        # title = Text("Gap Closure",color=YELLOW).to_edge(UP)
        # self.wait()
        # self.play(Write(title))
        # self.wait()
        # self.play(Create(top1),Create(bottom1))
        # self.play(Create(top2),Create(bottom2))
        # self.wait()
        # self.camera.frame.save_state()
        # self.play(self.camera.frame.animate.set(width=0.25).move_to(d2))
        # self.wait()
        # self.play(gap.animate.set_value(0.1036),run_time=5)
        # self.wait()

# Gap Equation
        # e1 = MathTex( r'y_{t}=5T\left[ 0.2969\sqrt{t}-0.1260t-0.3516t^{2}+0.2843t^{3}-0.1015t^{4} \right]').to_edge(DL)
        # e2 = MathTex( r'0.2969-0.1260-0.3516+0.2843-').to_edge(DL)
        # g1 = DecimalNumber(gap.get_value(),num_decimal_places=4).next_to(e2,RIGHT)
        # e3 = MathTex( r'=').next_to(g1,RIGHT)
        # g2 = DecimalNumber(0.2969-0.1260-0.3516+0.2843-gap.get_value(),num_decimal_places=4).next_to(e3,RIGHT)
        # g1.add_updater(lambda mob: mob.become(DecimalNumber(gap.get_value(),num_decimal_places=4).next_to(e2,RIGHT)))
        # g2.add_updater(lambda mob: mob.become(DecimalNumber(0.2969-0.1260-0.3516+0.2843-gap.get_value(),num_decimal_places=4).next_to(e3,RIGHT)))
        # self.wait()
        # self.play(Write(e1))
        # self.wait()
        # self.play(Transform(e1,e2),Write(g1),Write(e3),Write(g2))
        # self.wait()
        # self.play(gap.animate.set_value(0.1036),run_time=5)
        # self.wait()

        th = MathTex( r'\theta')
        self.wait()
        self.play(Write(th))
        self.wait()